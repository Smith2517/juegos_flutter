rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isImage() {
      return request.resource.contentType.matches('image/.*');
    }

    function isAudio() {
      return request.resource.contentType.matches('audio/.*');
    }

    function isValidSize() {
      // Max 5MB for images, 10MB for audio
      return (isImage() && request.resource.size < 5 * 1024 * 1024) ||
             (isAudio() && request.resource.size < 10 * 1024 * 1024);
    }

    // Public assets (avatars, game assets, etc.) - read-only
    match /avatars/{filename} {
      allow read: if true;
      allow write: if false; // Only admin via console
    }

    match /game-assets/{path=**} {
      allow read: if true;
      allow write: if false; // Only admin via console
    }

    match /backgrounds/{filename} {
      allow read: if true;
      allow write: if false; // Only admin via console
    }

    match /icons/{filename} {
      allow read: if true;
      allow write: if false; // Only admin via console
    }

    match /sounds/{filename} {
      allow read: if true;
      allow write: if false; // Only admin via console
    }

    // User-specific content (drawings, creations)
    match /user-creations/{userId}/{filename} {
      // Users can read and write their own creations
      allow read: if isAuthenticated() && isOwner(userId);

      allow write: if isAuthenticated() &&
                      isOwner(userId) &&
                      isImage() &&
                      isValidSize();

      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // User profile pictures (if different from avatars)
    match /user-profiles/{userId}/{filename} {
      allow read: if isAuthenticated();

      allow write: if isAuthenticated() &&
                      isOwner(userId) &&
                      isImage() &&
                      request.resource.size < 2 * 1024 * 1024; // Max 2MB

      allow delete: if isAuthenticated() && isOwner(userId);
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
